
// Code generated by stanc df9375a
#include <stan/model/model_header.hpp>
namespace lotka_volterra_sim_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 25, column 2 to column 27)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 26, column 2 to column 30)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 27, column 2 to column 27)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 30, column 2 to column 123)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 33, column 2 to column 33)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 34, column 2 to column 37)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 35, column 2 to column 27)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 36, column 2 to column 33)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 16, column 2 to column 12)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 17, column 2 to column 12)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 18, column 2 to column 19)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 19, column 10 to column 11)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 19, column 2 to column 13)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 20, column 2 to column 17)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 21, column 20 to column 21)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 21, column 2 to column 26)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 30, column 25 to column 26)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 3, column 4 to column 18)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 4, column 4 to column 18)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 6, column 4 to column 40)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 7, column 4 to column 42)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 9, column 4 to column 19)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 10, column 4 to column 20)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 11, column 4 to column 20)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 12, column 4 to column 16)",
                                                      " (in '/Users/yiz/Work/cmdstan/examples/lotka-volterra/lotka-volterra_sim.stan', line 2, column 80 to line 13, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
T4__, stan::promote_args_t<T5__>>, -1, 1>
dz_dt(const T0__& t, const T1__& z_arg__, const T2__& alpha,
      const T3__& beta, const T4__& gamma, const T5__& delta,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          T2__,
          T3__,
          T4__, stan::promote_args_t<T5__>>;
  const auto& z = to_ref(z_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ u;
    u = DUMMY_VAR__;
    
    current_statement__ = 18;
    u = z[(1 - 1)];
    local_scalar_t__ v;
    v = DUMMY_VAR__;
    
    current_statement__ = 19;
    v = z[(2 - 1)];
    local_scalar_t__ du_dt;
    du_dt = DUMMY_VAR__;
    
    current_statement__ = 20;
    du_dt = ((alpha - (beta * v)) * u);
    local_scalar_t__ dv_dt;
    dv_dt = DUMMY_VAR__;
    
    current_statement__ = 21;
    dv_dt = ((-gamma + (delta * u)) * v);
    Eigen::Matrix<local_scalar_t__, -1, 1> dydt;
    dydt = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(dydt, DUMMY_VAR__);
    
    current_statement__ = 23;
    assign(dydt, cons_list(index_uni(1), nil_index_list()), du_dt,
      "assigning variable dydt");
    current_statement__ = 24;
    assign(dydt, cons_list(index_uni(2), nil_index_list()), dv_dt,
      "assigning variable dydt");
    current_statement__ = 25;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct dz_dt_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
T4__, stan::promote_args_t<T5__>>, -1, 1>
operator()(const T0__& t, const T1__& z, const T2__& alpha, const T3__& beta,
           const T4__& gamma, const T5__& delta, std::ostream* pstream__)  const 
{
return dz_dt(t, z, alpha, beta, gamma, delta, pstream__);
}
};


struct dz_dt_odefunctor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>, T2__, T3__,
T4__, stan::promote_args_t<T5__>>, -1, 1>
operator()(const T0__& t, const T1__& z, std::ostream* pstream__,
           const T2__& alpha, const T3__& beta, const T4__& gamma,
           const T5__& delta)  const 
{
return dz_dt(t, z, alpha, beta, gamma, delta, pstream__);
}
};

class lotka_volterra_sim_model final : public model_base_crtp<lotka_volterra_sim_model> {

 private:
  double rtol;
  double atol;
  int N;
  std::vector<double> ts;
  std::vector<double> y_init;
  std::vector<std::vector<double>> y;
 
 public:
  ~lotka_volterra_sim_model() final { }
  
  std::string model_name() const final { return "lotka_volterra_sim_model"; }

  std::vector<std::string> model_compile_info() const {
    std::vector<std::string> stanc_info;
    stanc_info.push_back("stanc_version = stanc3 df9375a");
    stanc_info.push_back("stancflags = ");
    return stanc_info;
  }
  
  
  lotka_volterra_sim_model(stan::io::var_context& context__,
                           unsigned int random_seed__ = 0,
                           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "lotka_volterra_sim_model_namespace::lotka_volterra_sim_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 9;
      context__.validate_dims("data initialization","rtol","double",
          context__.to_vec());
      rtol = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      rtol = context__.vals_r("rtol")[(1 - 1)];
      current_statement__ = 10;
      context__.validate_dims("data initialization","atol","double",
          context__.to_vec());
      atol = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      atol = context__.vals_r("atol")[(1 - 1)];
      current_statement__ = 11;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 11;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 11;
      current_statement__ = 11;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 12;
      validate_non_negative_index("ts", "N", N);
      current_statement__ = 13;
      context__.validate_dims("data initialization","ts","double",
          context__.to_vec(N));
      ts = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      assign(ts, nil_index_list(), context__.vals_r("ts"),
        "assigning variable ts");
      current_statement__ = 14;
      context__.validate_dims("data initialization","y_init","double",
          context__.to_vec(2));
      y_init = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      assign(y_init, nil_index_list(), context__.vals_r("y_init"),
        "assigning variable y_init");
      current_statement__ = 15;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 16;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N, 2));
      y = std::vector<std::vector<double>>(N, std::vector<double>(2, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 16;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 16;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 16;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 16;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 16;
          current_statement__ = 16;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 17;
      validate_non_negative_index("z", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 4;
      num_params_r__ += 2;
      num_params_r__ += 2;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  inline T__ log_prob(std::vector<T__>& params_r__,
                      std::vector<int>& params_i__,
                      std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "lotka_volterra_sim_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 1;
        assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable theta");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(theta[(sym1__ - 1)], 0, lp__),
            "assigning variable theta");
        } else {
          current_statement__ = 1;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(theta[(sym1__ - 1)], 0),
            "assigning variable theta");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> z_init;
      z_init = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(z_init, DUMMY_VAR__);
      
      current_statement__ = 2;
      z_init = in__.vector(2);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(z_init, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(z_init[(sym1__ - 1)], 0, lp__),
            "assigning variable z_init");
        } else {
          current_statement__ = 2;
          assign(z_init, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(z_init[(sym1__ - 1)], 0),
            "assigning variable z_init");
        }}
      std::vector<local_scalar_t__> sigma;
      sigma = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma");
        } else {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
            "assigning variable sigma");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> z;
      z = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(2));
      stan::math::fill(z, DUMMY_VAR__);
      
      current_statement__ = 4;
      assign(z, nil_index_list(),
        ode_bdf_tol(dz_dt_odefunctor__(), z_init, 0.0, ts, rtol, atol, 500,
          pstream__, theta[(1 - 1)], theta[(2 - 1)], theta[(3 - 1)],
          theta[(4 - 1)]), "assigning variable z");
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 4;
          current_statement__ = 4;
          check_greater_or_equal(function__, "z[sym1__, sym2__]",
                                 z[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      {
        current_statement__ = 5;
        lp_accum__.add(
          normal_lpdf<propto__>(
            rvalue(theta,
              cons_list(index_multi(stan::math::array_builder<int>().add(1)
                .add(3).array()), nil_index_list()), "theta"), 1, 0.5));
        current_statement__ = 6;
        lp_accum__.add(
          normal_lpdf<propto__>(
            rvalue(theta,
              cons_list(index_multi(stan::math::array_builder<int>().add(2)
                .add(4).array()), nil_index_list()), "theta"), 0.05, 0.05));
        current_statement__ = 7;
        lp_accum__.add(lognormal_lpdf<propto__>(sigma, -1, 1));
        current_statement__ = 8;
        lp_accum__.add(
          lognormal_lpdf<propto__>(z_init, stan::math::log(10), 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  inline void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                          std::vector<int>& params_i__,
                          std::vector<double>& vars__,
                          bool emit_transformed_parameters__ = true,
                          bool emit_generated_quantities__ = true,
                          std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "lotka_volterra_sim_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      std::vector<double> theta;
      theta = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 1;
        assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable theta");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 1;
        assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(theta[(sym1__ - 1)], 0),
          "assigning variable theta");}
      Eigen::Matrix<double, -1, 1> z_init;
      z_init = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(z_init, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      z_init = in__.vector(2);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        assign(z_init, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(z_init[(sym1__ - 1)], 0),
          "assigning variable z_init");}
      std::vector<double> sigma;
      sigma = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma");}
      std::vector<Eigen::Matrix<double, -1, 1>> z;
      z = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(2));
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(z_init[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      assign(z, nil_index_list(),
        ode_bdf_tol(dz_dt_odefunctor__(), z_init, 0.0, ts, rtol, atol, 500,
          pstream__, theta[(1 - 1)], theta[(2 - 1)], theta[(3 - 1)],
          theta[(4 - 1)]), "assigning variable z");
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 4;
          current_statement__ = 4;
          check_greater_or_equal(function__, "z[sym1__, sym2__]",
                                 z[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(z[(sym2__ - 1)][(sym1__ - 1)]);}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  inline void transform_inits(const stan::io::var_context& context__,
                              std::vector<int>& params_i__,
                              std::vector<double>& vars__,
                              std::ostream* pstream__) const
    final {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> theta;
      theta = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(theta, nil_index_list(), context__.vals_r("theta"),
        "assigning variable theta");
      std::vector<double> theta_free__;
      theta_free__ = std::vector<double>(4, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 1;
        assign(theta_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(theta[(sym1__ - 1)], 0),
          "assigning variable theta_free__");}
      Eigen::Matrix<double, -1, 1> z_init;
      z_init = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(z_init, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_init_flat__;
        current_statement__ = 2;
        assign(z_init_flat__, nil_index_list(), context__.vals_r("z_init"),
          "assigning variable z_init_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 2;
          assign(z_init, cons_list(index_uni(sym1__), nil_index_list()),
            z_init_flat__[(pos__ - 1)], "assigning variable z_init");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> z_init_free__;
      z_init_free__ = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(z_init_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        assign(z_init_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(z_init[(sym1__ - 1)], 0),
          "assigning variable z_init_free__");}
      std::vector<double> sigma;
      sigma = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(sigma, nil_index_list(), context__.vals_r("sigma"),
        "assigning variable sigma");
      std::vector<double> sigma_free__;
      sigma_free__ = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(sigma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__");}
      for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
        vars__.emplace_back(theta_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(z_init_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("theta");
    names__.emplace_back("z_init");
    names__.emplace_back("sigma");
    names__.emplace_back("z");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const
    final {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(4)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(2)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_init" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_init" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_init\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_init\",\"type\":{\"name\":\"vector\",\"length\":" << 2 << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << 2 << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = nullptr) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = nullptr) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__ = nullptr) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}

using stan_model = lotka_volterra_sim_model_namespace::lotka_volterra_sim_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


